{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["d3","window","getRandomData","count","data","i","push","cx","Math","random","innerWidth","cy","floor","innerHeight","r","color","toString","App","state","svg","componentDidUpdate","value","select","selectAll","enter","append","style","attr","merge","transition","duration","exit","remove","render","width","height","ref","tabIndex","onKeyDown","e","key","setState","React","Component","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAEIA,EAAKC,OAAOD,GAYVE,EAA0B,SAACC,GAE7B,IADA,IAAIC,EAAe,GACVC,EAAI,EAAGA,EAAIF,EAAOE,IACvBD,EAAKE,KAAK,CACNC,GAAqB,IAAhBC,KAAKC,SAAoBR,OAAOS,WACrCC,GAAKH,KAAKI,MAAMJ,KAAKC,SAAWR,OAAOY,aACvCC,EAAoB,GAAhBN,KAAKC,SAAiB,GAC1BM,MARmC,MAAQ,GAAK,IAAMP,KAAKC,SAAW,GAAGO,SAAS,MAW1F,OAAOZ,GAgEIa,E,4MA5DXC,MAAe,CACXf,MAAO,G,EAEXgB,S,IACAC,mBAAqB,WACjB,IAAIhB,EAAeF,EAAc,EAAKgB,MAAMf,OACxCkB,EAAQrB,EAAGsB,OAAO,EAAKH,KACtBI,UAAU,UACVnB,KAAKA,GACViB,EACKG,QACAC,OAAO,UACPC,MAAM,QAAQ,SAAArB,GAAC,OAAIA,EAAEU,SACrBY,KAAK,KAAMnB,KAAKC,SAAWR,OAAOS,YAClCiB,KAAK,KAAOnB,KAAKI,MAAMJ,KAAKC,SAAWR,OAAOY,cAC9Ce,MAAMP,GACNQ,aACAC,SAAStB,KAAKI,MAAsB,IAAhBJ,KAAKC,WACzBiB,MAAM,QAAQ,SAAArB,GAAC,OAAIA,EAAEU,SACrBY,KAAK,MAAM,SAAAtB,GAAC,OAAIA,EAAEE,MAClBoB,KAAK,MAAM,SAAAtB,GAAC,OAAIA,EAAEM,MAClBgB,KAAK,KAAK,SAAAtB,GAAC,OAAIA,EAAES,KACtBO,EACKU,OACAF,aACAC,SAAStB,KAAKI,MAAsB,IAAhBJ,KAAKC,WACzBkB,KAAK,IAAK,GACVK,U,EAITC,OAAS,WACL,OAAO,yBACHC,MAAOjC,OAAOS,WACdyB,OAAQlC,OAAOY,YACfuB,IAAK,SAACA,GAAD,OAAwB,EAAKjB,IAAMiB,GACxCC,SAAU,EACVC,UAAW,SAACC,GACR,IAAIlB,EACJ,OAAQkB,EAAEC,KACN,IAAK,IACDnB,GAAS,EACT,MACJ,IAAK,IACL,IAAK,IACDA,EAAQ,EACR,MACJ,QACIA,EAAQ,EAEhB,EAAKoB,UAAS,SAAAvB,GACV,MAAO,CACH,MAASA,EAAMf,MAAQkB,U,YArD7BqB,IAAMC,WCfJC,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASf,OACP,kBAAC,IAAMgB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.69d9f690.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet d3 = window.d3;\r\n\r\ninterface State {\r\n    count: number;\r\n}\r\ninterface DATA {\r\n    cx: number,\r\n    cy: number,\r\n    r: number,\r\n    color: string\r\n}\r\nconst getRandomColor: Function = (): string => \"#\" + ((1 << 24) * Math.random() | 0).toString(16)\r\nconst getRandomData: Function = (count: number) : DATA[] => {\r\n    let data: DATA[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n        data.push({\r\n            cx: (Math.random() * 10000) % window.innerWidth,\r\n            cy: (Math.floor(Math.random() * window.innerHeight)),\r\n            r: (Math.random() * 25) + 10,\r\n            color: getRandomColor()\r\n        })\r\n    }\r\n    return data;\r\n}\r\n\r\nclass App extends React.Component<{}, State> {\r\n    state: State = {\r\n        count: 0\r\n    }\r\n    svg!: SVGSVGElement;\r\n    componentDidUpdate = (): void => {\r\n        let data: DATA[] = getRandomData(this.state.count);\r\n        let value = d3.select(this.svg)\r\n            .selectAll(\"circle\")\r\n            .data(data);\r\n        value\r\n            .enter()\r\n            .append('circle')\r\n            .style('fill', i => i.color)\r\n            .attr('cx', Math.random() * window.innerWidth )\r\n            .attr('cy', (Math.floor(Math.random() * window.innerHeight)))\r\n            .merge(value as any)\r\n            .transition()\r\n            .duration(Math.floor(Math.random() * 3000))\r\n            .style('fill', i => i.color)\r\n            .attr('cx', i => i.cx)\r\n            .attr('cy', i => i.cy)\r\n            .attr('r', i => i.r)\r\n        value\r\n            .exit()\r\n            .transition()\r\n            .duration(Math.floor(Math.random() * 3000))\r\n            .attr('r', 0)\r\n            .remove();\r\n\r\n    }\r\n\r\n    render = (): React.ReactNode => {\r\n        return <svg\r\n            width={window.innerWidth}\r\n            height={window.innerHeight}\r\n            ref={(ref: SVGSVGElement) => this.svg = ref}\r\n            tabIndex={0}\r\n            onKeyDown={(e) => {\r\n                let value: number;\r\n                switch (e.key) {\r\n                    case \"-\":\r\n                        value = -1;\r\n                        break;\r\n                    case \"+\":\r\n                    case \"=\":\r\n                        value = 1;\r\n                        break;\r\n                    default:\r\n                        value = 0;\r\n                }\r\n                this.setState(state => {\r\n                    return {\r\n                        \"count\": state.count + value\r\n                    }\r\n                })\r\n            }}\r\n        />;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}